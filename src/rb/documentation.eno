# Global

version: 0.1.0 (Early Alpha)

-- intro
This documentation is an early work in progress and the API is partially unstable.  
enorb is still under development and not yet ready for production use.

## Installation

```shell
gem install enorb
```

## Getting started

```ruby
require 'enorb'

input = File.read('[your-file].eno')
document = Eno.parse(input)

puts document.field('[your-field]')  # prints '[your-value]'
```
## Links

Gem on rubygems - <https://rubygems.org/gems/enorb>  
Repository on github - <https://github.com/eno-lang/enorb> 
-- intro

# Modules

## Eno

-- class description
The main module. You'll be calling `parse` on this, and possibly supplying a custom
locale (such as `'de'`, `'es'`, ...), reporter type (`Eno::Reporters::Text`, `Eno::Reporters::HTML`, `Eno::Reporters::Terminal` are available)
or source label (usually to have filename appear in error messages) to that call.
-- class description

### ::parse

syntax:
| parse(input) → Eno::Section
| parse(input, locale = 'en', reporter = 'html', source_label = nil) → Eno::Section

-- description
Parse a string in eno notation.
-- description

-- eno
color: blue
-- eno

-- ruby
eno.parse(input)  #=> <#Eno::Document length="1">

eno.parse(input, locale: 'es')  # Any errors will be reported in spanish
eno.parse(input, reporter: 'html')  # Errors will be html for e.g. web integration
eno.parse(input, reporter: 'terminal')  # Errors will be colored for terminal output
eno.parse(input, source_label: 'my-file.eno')  # Errors will include the label as context
-- ruby

#### parameters

input: A string containing text in eno notation.
options: Various options (see example above)

#### return value

description: An `Eno::Section` representing the document.

## Eno::Value

-- class description
All values in an eno document, such as the value of a field like `name: value`,
the lines inside a block, the value of a list item, the value of a dictionary
entry, and so on, map to an `Eno::Value`. Usually you don't interact with this
because you directly get the values from a section or dictionary in most cases.
Only when you sequentially iterate a section (with `Eno::Section`'s
'`#sequential` method) you will get to interact with this class.
-- class description

### #error

syntax:
| error → Eno::ValidationError
| error(message or messageFunction) → Eno::ValidationError

-- description
Generate an error in the context of the element. The error includes a generic
message by default, or a custom one if you supply it (which is the recommended
practice). You can also pass a message function which (like the loader functions
too) gets the name and value as arguments and returns a message string. This
serves to create highly informative error messages that pin-point to the exact
origin of the error, even when the initial reading of data is already past, e.g.
when the error condition is only apparent later, when more processing has
occurred or other data is available.
-- description

-- eno
color: cozy
-- eno

-- ruby
document = eno.parse(input)
element, value = document.field('color', with_element: true)

# ...

if value == 'cozy'
  raise element.error('Postprocessing determined that "cozy" is not a color after all.')
end
-- ruby

#### parameters

message or messageFunction:
| Highly recommended to provide one (but it's optional).
|
| Either directly pass a string, or alternatively a function returning a string.  
| (The function is passed `name` and `value` inside a single object parameter.)

#### return value

description:
| An `Eno::ValidationError` in the context of the element's value
| (and with an optional custom message).

### #empty?

syntax: empty? → boolean

-- description
Query whether the value is empty (e.g. `comment:  ` in an eno document), which in ruby terms is equivalent of `nil`.
-- description

#### return value

description: `true` if empty, otherwise `false`.

### #raw

syntax: raw → object or value

-- description
Retrieve a native object representation of the value.
The representation differs depending on whether there is a name (e.g. for a field value),
or not (applies only to list item values).
-- description

-- eno
color: blue
numbers:
- 13
- 42
-- eno

-- ruby
document = eno.parse(input)

document.sequential[0].raw  #=> { 'color' => 'blue' }

list = document.list('numbers', with_element: true)
list.first[0].raw  #=> '13'
-- ruby

#### return value

description: A native representation of the value element.

### #to_s

syntax: to_s → string

-- description
Retrieve an abstract debug representation of of this `Eno::Value`.
The representation differs depending on whether there is a name (e.g. for a field value)
or not (applies only to list item values).
-- description

-- eno
color: blue
numbers:
- 13
- 42
-- eno

-- ruby
document = eno.parse(input)

document.sequential[0].to_s  #=> '<#Eno::Value name="color" value="blue">'

list = document.list('numbers', with_element: true)
list.first[0].to_s  #=> '<#Eno::Value value="13">'
-- ruby

#### return value

description: An abstract debug representation of this `Eno::Value`.

### #value

syntax:
| value → value or nil
| value { |name, value| loader } → value or nil

-- description
Retrieve the value of an `Eno::Value`, optionally passing it through a loader block.
-- description

-- eno
flag color: beige
towel color:
|
-- eno

-- ruby
document = eno.parse(input)

flag_color = document.sequential()[0]
flag_color = document.sequential()[0]
towel_color = document.sequential()[1]

flag_color.value  # => 'beige'
towel_color.value  # => nil

flag_color.value(->(name, value) { value.gsub('eig', 'lu') }   #=> 'blue'

flag_color.value do |name, value|
  value.gsub('eig', 'lu')
end  #=> 'blue'
  
-- ruby

#### parameters

loader:
| A block returning the transformed/validated value or raising an error.  
| The block is passed `name` and `value` as arguments.

#### return value

description: The (optionally transformed/validated) value of this `Eno::Value`.

## Eno::List

-- class description
Lists such as the one below are represented as an `Eno::List`:

```eno
things:
- toys
- plants
```

Like `Eno::Value`, you will seldom interact with this class, and instead use the `list`
method on the document or its sections to directly obtain the values of a list.
-- class description

### #items

syntax:
| items → array
| items(loader) → array
| items { |name, value| loader } → array

-- description
Retrieve the items of the list, optionally passing them through a loader block or Proc.
Note that when you provide both a block and a Proc the block takes precedence.
-- description

-- eno
colors:
- pink
- peach
-- eno

-- ruby
document = eno.parse(input)
list = document.sequential[0]

list.items()  #=> ['pink', 'peach']

list.items(->(name, value) { "#{value}!!" })  #=> ['pink!!', 'peach!!']

list.items { |name, value| { "#{value}!!" }  #=> ['pink!!', 'peach!!']
-- ruby

#### return value

description: The (optionally transformed/validated) items of this list as an array.

### #raw

syntax: raw → object

-- description
Retrieve a native representation of the list.
-- description

-- eno
colors:
- pink
- peach
-- eno

-- ruby
document = eno.parse(input)

document.sequential[0].raw  #=> { 'colors' => ['pink', 'peach'] }
-- ruby

#### return value

description: A native representation of the list.

### #to_s

syntax: to_s → string

-- description
Retrieve an abstract debug representation of the list.
-- description

-- eno
numbers:
- 13
- 42
-- eno

-- ruby
document = eno.parse(input)

document.list('numbers').to_s  #=> '<#Eno::List name="numbers" length="2">'
-- ruby

#### return value

description: An abstract debug representation of the list.

## Eno::Dictionary

-- class description
Dictionaries are represented as an `Eno::Dictionary`:

```eno
rated things:
toys = 5 stars
plants = 3 stars
```

You will mostly obtain an instance of this through the `#dictionary` method on a document/section.
-- class description

### #assert_all_touched

syntax:
| assert_all_touched
| assert_all_touched(except: [])
| assert_all_touched(only: [])
| assert_all_touched(message or message_proc)
| assert_all_touched { |name, value| message_block }

-- description
Assert that all entries of this dictionary that were present in the parsed eno document
were also queried (and therefore *touched*) by the application. This, combined with eno's
query methods, serves to ensure a two-way guarantee for both users and developers:
No data that the application requires can be left out, and no data that the application
does not process can be supplied.
-- description

-- eno
Important data:
A = I need to be processed!
B = Me too!
-- eno

-- ruby
document = eno.parse(input)

data_a = document.dictionary('Important data').entry('A')

# ... processing happens only for data_a

document.assert_all_touched  # raises an error
-- ruby

#### parameters

-- message or messageFunction
Optional, usually the default message (*An excess element named [NAME] was
found, is it possibly a typo?*) will do fine. If you want to override it,
provide either a static message as a string, or alternatively a block or proc
returning a string. (The function is passed `name` and `value` inside a single
object parameter.)
-- message or messageFunction

-- options
`only` - An array of strings, e.g. `['name', 'email']`, which specifies to only check these entries for whether they've been touched.  
`except` - An array of strings, e.g. `['phone number']`, which specifies to exclude these entries from checking whether they've been touched.  
-- options

### #entry

syntax:
| entry(name) → value or nil
| entry(name, loader) → value or nil
| entry(name, enforce_element: false, required: false, with_element: false) → object/value or nil

-- description
Retrieve an entry's value from the dictionary, optionally supplying a loader to
validate and/or transform the value, and/or an options object.
-- description

-- eno
Q&A:
Meaning = 42
Green = Yes
Purpose =
-- eno

-- ruby
document = eno.parse(input)
qa = document.dictionary('Q&A')

qa.entry('Meaning')   #=> '42'
qa.entry('Purpose')   #=> nil

qa.entry('Purpose', required: true)   # throws an error
qa.entry('Purpose', enforce_element: true)   #=> nil
qa.entry('Beige', enforce_element: true)   # throws an error

qa.entry('Green', ->(name, value) { value.upcase })   #=> 'YES'

qa.entry('Meaning') do |name, value|  # throws an error
  raise "That one's getting old!" if value === '42'
  value
end

qa.entry('Meaning', with_element: true)   #=> [ <#Eno::Value name="Meaning" value="42"> , '42' ]
-- ruby

#### parameters

name: The name of the entry as a string.

loader:
| A function returning the transformed/validated value or throwing an error.  
| The function is passed `name` and `value` inside a single object parameter.

-- options
`enforce_element`: Whether the entry must be present in the document (defaults to `false`)  
`required`: Whether there must be a value for this entry (defaults to `false`)  
`with_element`: Whether to return an object with both the element and the value (defaults to `false`)
-- options

#### return value

description: The entry's value, or `nil` if empty.

### #enforce_element

syntax:
| enforce_element = true or false

-- description
Set the default for all following queries on this dictionary of whether the
presence of elements in the eno input text should be enforced (by default it is
not). This can be used to prevent "template decay" - with presence enforcement
enabled entries may be empty, but they (at least their declaration) must be
there in the eno document and consequently they can not disappear from a
template at any point without triggering an error.
-- description

-- eno
conversions:
0001 = 1
0010 = 2
-- eno

-- ruby
document = eno.parse(input)

conversions = document.dictionary('conversions')

conversions.enforce_element = true

conversions.entry('0011')  # raises an error
conversions.entry('0011', enforce_element: false)  #=> nil
-- ruby

### #raw

syntax: raw → object

-- description
Retrieve a native representation of the dictionary.
-- description

-- eno
weights:
apple = 100g
pineapple = 800g
-- eno

-- ruby
document = eno.parse(input)

document.dictionary('weights').raw 
  #=> { 'weights' => { 'apple' => '100g', 'pineapple' => '800g' } }
-- ruby

#### return value

description: A native object representation of the dictionary.

### #to_s

syntax: to_s → string

-- description
Retrieve an abstract debug representation of the dictionary.
-- description

-- eno
numbers:
13 = thirteen
23 = twentythree
-- eno

-- ruby
document = eno.parse(input)

document.dictionary('numbers').to_s  #=> '<#Eno::Dictionary name="numbers" length="2">'
-- ruby

#### return value

description: An abstract debug representation of the dictionary.

## Eno::Empty

-- class description
This represents empty elements such as `color:`, where it is not clear if it is an empty field, list, or dictionary.
-- class description

### #error

syntax:
| error → Eno::ValidationError
| error(message or message_proc) → Eno::ValidationError
| error { |name, value| message_block } → Eno::ValidationError

-- description
Generate an error in the context of the element. The error includes a generic
message by default, or a custom one if you supply it (which is the recommended
practice). You can also pass a message block or Proc which (like loaders too)
gets the name and value as arguments and returns a message string. This serves
to create highly informative error messages that pin-point to the exact origin
of the error, even when the initial reading of data is already past, e.g. when
the error condition is only apparent later, when more processing has occurred or
other data is available.
-- description

-- eno
color:
-- eno

-- ruby
document = eno.parse(input)

element, value = document.field('color', with_element: true)

# ...

if value.nil?
  raise element.error('Postprocessing determined that this value needs to be provided.')
end
-- ruby

#### parameters

message or message_proc:
| Highly recommended to provide one (but it's optional).
|
| Either directly pass a string, or alternatively a Proc returning a string.  
| (The Proc is passed `name` and `value` as arguments)

message_block: Same as message_proc, takes precedence if both are specified!

#### return value

description:
| An `Eno::ValidationError` in the context of the element's value
| (and with an optional custom message).

### #raw

syntax: raw → object

-- description
Retrieve a native representation of the empty element.
-- description

-- eno
color:
-- eno

-- ruby
document = eno.parse(input)

document.sequential[0].raw  #=> { 'color' => nil }
-- ruby

#### return value

description: A native representation of the empty element.

### #to_s

syntax: to_s → string

-- description
Retrieve an abstract debug representation of the empty element.
-- description

-- eno
color:
-- eno

-- ruby
document = eno.parse(input)
elements = document.sequential

elements[0].to_s  #=> '<#Eno::Empty name="color">'
-- ruby

#### return value

description: An abstract debug representation of the empty element.

### #value

syntax:
| value → nil

-- description
Retrieve the value (always returns `nil`).
-- description

-- eno
note:
-- eno

-- ruby
document = eno.parse(input)

note = document.sequential[0]

note.value  #=> nil
-- ruby

#### return value

description: Always `nil`.

## Eno::GenericError

-- class description
The single generic error interface for all (user) errors that eno generates.
Note that this is never raised by itself, but only in one of it's subclassed
variants (`Eno::ParseError` and `Eno::ValidationError`). However, you can still
utilize this generic class in cases where you want to catch both parser and
validation errors indiscriminately, like so:

```ruby
begin
  # ...
rescue Eno::GenericError => e # catches both Eno::ParseError and Eno::ValidationError
  # ...
end
```
-- class description

### #cursor

syntax: cursor → [line, column]

-- description
Returns a cursor position as an array of the form [line, column], indicating
where a cursor should be placed if an application wants to offer the user a way
to move the cursor straight to the error location.
-- description

-- ruby
begin
  # ...
rescue Eno::GenericError => e
  e.cursor  #=> [3, 14]
end
-- ruby

#### return value

description: An array, where [0] is the line number, and [1] is the column number.

### #selection

syntax: selection → [[line, column], [line, column]]

-- description
Returns a selection as an array of the form [[line, column], [line, column]],
indicating a text range to select if an application wants to offer the user a
way to get a selection for the error in the input.
-- description

-- ruby
begin
  # ...
rescue Eno::GenericError => e
  e.cursor  #=> [[3, 14], [3, 23]]
end
-- ruby

#### return value

description:
| An array, where [0] is the begin of the selection and [1] is the end,
| and both begin and end are each again an array, where [0] is the
| line number, and [1] is the column number.

### #message

syntax: message → string

-- description
Contains both the error text as well as the snippet. This is also what you
get in the console when you don't catch the error.
-- description

-- ruby
begin
  # ...
rescue Eno::GenericError => e
  e.message  #=> "In line 4 'a' is copied into itself.\n\n   Line | Content\n ..."
end
-- ruby

#### return value

description: Both the error text as well as the snippet.

### #snippet

syntax: snippet → string

-- description
Returns a formatted excerpt of those passage(s) from the input where the error occurred.
-- description

-- ruby
begin
  # ...
rescue Eno::GenericError => e
  e.snippet
  
  # returns something like ...
  #
  #   Line | Content
  #      1 | 
  # *    2 |     # a
  # *    3 |     ## b
  # >    4 |     ### c < a
  #      5 |
end
-- ruby

#### return value

description: A formatted excerpt of those passage(s) from the input where the error occurred.

### #text

syntax: text → string

-- description
Returns a one-liner that describes the error in human language.
-- description

-- ruby
begin
  # ...
rescue Eno::GenericError => e
  e.message  #=> "In line 4 'a' is copied into itself."
end
-- ruby

#### return value

description: A single sentence that describes the error in human language.

## Eno::ParseError

-- class description
When this is raised, it indicates an error regarding syntax or grammatical semantics of the document.
Functionally this behaves exactly like `Eno::GenericError`, therefore the interface methods are not repeated here and can
be looked up on the `Eno::GenericError` documentation.
-- class description

## Eno::ValidationError

-- class description
When this is raised, it indicates an error regarding application-specific requirements for the document.
Functionally this behaves exactly like `Eno::GenericError`, therefore the interface methods are not repeated here and can
be looked up on the `Eno::GenericError` documentation.
-- class description
